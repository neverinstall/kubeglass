name: GoReleaser Build and Release

on:
  push:
    tags:
      - 'v*'
env:
    GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

permissions:
  contents: write
  packages: write

jobs:
  goreleaser:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Install cross-compilers and musl tools
        run: |
          sudo apt-get update
          # Install musl tools for static linking
          sudo apt-get install -y musl-tools musl-dev
          # Install ARM64 musl cross-compiler
          sudo apt-get install -y gcc-aarch64-linux-gnu
          # Download and install musl cross-compiler for ARM64
          wget https://musl.cc/aarch64-linux-musl-cross.tgz
          sudo tar -xzf aarch64-linux-musl-cross.tgz -C /opt
          echo "/opt/aarch64-linux-musl-cross/bin" >> $GITHUB_PATH
          rm aarch64-linux-musl-cross.tgz

      - name: Install eBPF/C build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential clang llvm libelf-dev linux-headers-generic linux-libc-dev libbpf-dev
      
      - name: Setup Kernel Headers and BPF Environment
        run: |
          echo "Setting up kernel headers environment..."
          # Find the installed kernel headers
          KERNEL_VERSION=$(ls /usr/src/ | grep linux-headers | grep -v generic | head -1)
          echo "Using kernel headers: $KERNEL_VERSION"
          echo "KERNEL_HEADERS_PATH=/usr/src/$KERNEL_VERSION" >> $GITHUB_ENV
          
          # Set comprehensive BPF compilation flags
          BPF_CFLAGS="-O2 -g -Wall -Werror"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/src/$KERNEL_VERSION/include"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/src/$KERNEL_VERSION/include/uapi"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/src/$KERNEL_VERSION/arch/x86/include"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/src/$KERNEL_VERSION/arch/x86/include/uapi"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/src/$KERNEL_VERSION/arch/x86/include/generated"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/include"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/include/x86_64-linux-gnu"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/include/bpf"
          echo "BPF_CFLAGS=$BPF_CFLAGS" >> $GITHUB_ENV

      - name: Create asm symlinks
        run: |
          # Instead of individual symlinks, copy the entire asm directory structure
          sudo mkdir -p /usr/include/asm
          sudo cp -r /usr/include/x86_64-linux-gnu/asm/* /usr/include/asm/
          echo "Copied all asm headers to /usr/include/asm/"
          ls -la /usr/include/asm/ | head

      - name: Create clang wrapper
        run: |
          echo '#!/bin/bash
          /usr/bin/clang -idirafter /usr/include/x86_64-linux-gnu "$@"' | sudo tee /usr/local/bin/clang-wrapper
          sudo chmod +x /usr/local/bin/clang-wrapper
          echo "Created clang wrapper at /usr/local/bin/clang-wrapper"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          BPF_CLANG: "/usr/local/bin/clang-wrapper"
          BPF_CFLAGS: ${{ env.BPF_CFLAGS }}
          CGO_ENABLED: "1" 