name: GoReleaser Build and Release

on:
  push:
    tags:
      - 'v*'
env:
    GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

permissions:
  contents: write
  packages: write

jobs:
  goreleaser:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: "0.11.0"

      - name: Install host and cross-compilation dependencies
        run: |
          # Add arm64 architecture for cross-compilation
          sudo dpkg --add-architecture arm64
          # Add the 'ports' repository which contains arm64 packages
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/arm64-ports.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64-ports.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64-ports.list
          # Update package lists for all architectures
          sudo apt-get update
          # Install dependencies for host (amd64) and target (arm64)
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            clang \
            llvm \
            libelf-dev \
            libelf-dev:arm64 \
            linux-headers-generic \
            linux-libc-dev \
            libbpf-dev \
            zlib1g-dev \
            zlib1g-dev:arm64
      
      - name: Setup Kernel Headers and BPF Environment
        run: |
          echo "Setting up kernel headers environment..."
          # Find the installed kernel headers
          KERNEL_VERSION=$(ls /usr/src/ | grep linux-headers | grep -v generic | head -1)
          echo "Using kernel headers: $KERNEL_VERSION"
          echo "KERNEL_HEADERS_PATH=/usr/src/$KERNEL_VERSION" >> $GITHUB_ENV
          
          # Set comprehensive BPF compilation flags
          BPF_CFLAGS="-O2 -g -Wall -Werror"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/src/$KERNEL_VERSION/include"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/src/$KERNEL_VERSION/include/uapi"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/src/$KERNEL_VERSION/arch/x86/include"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/src/$KERNEL_VERSION/arch/x86/include/uapi"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/src/$KERNEL_VERSION/arch/x86/include/generated"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/include"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/include/x86_64-linux-gnu"
          BPF_CFLAGS="$BPF_CFLAGS -I/usr/include/bpf"
          echo "BPF_CFLAGS=$BPF_CFLAGS" >> $GITHUB_ENV

      - name: Create asm symlinks
        run: |
          # Instead of individual symlinks, copy the entire asm directory structure
          sudo mkdir -p /usr/include/asm
          sudo cp -r /usr/include/x86_64-linux-gnu/asm/* /usr/include/asm/
          echo "Copied all asm headers to /usr/include/asm/"
          ls -la /usr/include/asm/ | head

      - name: Create clang wrapper
        run: |
          echo '#!/bin/bash
          /usr/bin/clang -idirafter /usr/include/x86_64-linux-gnu "$@"' | sudo tee /usr/local/bin/clang-wrapper
          sudo chmod +x /usr/local/bin/clang-wrapper
          echo "Created clang wrapper at /usr/local/bin/clang-wrapper"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          BPF_CLANG: "/usr/local/bin/clang-wrapper"
          BPF_CFLAGS: ${{ env.BPF_CFLAGS }}
          CGO_ENABLED: "1" 